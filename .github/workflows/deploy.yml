name: Deploy to Heroku

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      - name: Set environment variables for testing
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV
          echo "OPENAI_API_KEY=test-key" >> $GITHUB_ENV
          echo "ANTHROPIC_API_KEY=test-key" >> $GITHUB_ENV
          echo "GEMINI_API_KEY=test-key" >> $GITHUB_ENV
          echo "COHERE_API_KEY=test-key" >> $GITHUB_ENV
          echo "SUPABASE_URL=https://test.supabase.co" >> $GITHUB_ENV
          echo "SUPABASE_KEY=test-key" >> $GITHUB_ENV

      - name: Run tests
        run: |
          pytest tests/ -v --tb=short

      - name: Run linting (if available)
        run: |
          if pip list | grep -q flake8; then
            flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          fi
        continue-on-error: true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.13.15
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}

      - name: Run database migrations (if needed)
        if: success()
        run: |
          # Install Heroku CLI
          curl https://cli-assets.heroku.com/install.sh | sh

          # Login to Heroku
          echo ${{ secrets.HEROKU_API_KEY }} | heroku auth:token

          # Run migrations if alembic is set up
          if [ -f "alembic.ini" ]; then
            heroku run alembic upgrade head --app ${{ secrets.HEROKU_APP_NAME }}
          fi
        continue-on-error: true

      - name: Health check
        if: success()
        run: |
          sleep 30  # Wait for app to start
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/)
          if [ $response -eq 200 ]; then
            echo "✅ Deployment successful! App is responding with HTTP $response"
          else
            echo "❌ Health check failed with HTTP $response"
            exit 1
          fi
