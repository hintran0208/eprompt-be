name: Deploy to Heroku

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #
  #   services:
  #     postgres:
  #       image: postgres:15
  #       env:
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: test_db
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432
  #
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - name: Set up Python 3.11
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.11"
  #
  #     - name: Cache pip dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pip-
  #
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt
  #         pip install pytest pytest-asyncio
  #
  #     - name: Set environment variables for testing
  #       run: |
  #         echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
  #         echo "SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV
  #         echo "OPENAI_API_KEY=test-key" >> $GITHUB_ENV
  #         echo "ANTHROPIC_API_KEY=test-key" >> $GITHUB_ENV
  #         echo "GEMINI_API_KEY=test-key" >> $GITHUB_ENV
  #         echo "COHERE_API_KEY=test-key" >> $GITHUB_ENV
  #         echo "SUPABASE_URL=https://test.supabase.co" >> $GITHUB_ENV
  #         echo "SUPABASE_KEY=test-key" >> $GITHUB_ENV
  #
  #     - name: Run tests
  #       run: |
  #         pytest tests/ -v --tb=short
  #
  #     - name: Run linting (if available)
  #       run: |
  #         if pip list | grep -q flake8; then
  #           flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
  #         fi
  #       continue-on-error: true

  deploy:
    # needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for proper git operations

      - name: Install Heroku CLI
        run: |
          # Install Heroku CLI using the official method
          curl https://cli-assets.heroku.com/install.sh | sh

          # Add to PATH
          export PATH="$HOME/.local/bin:$PATH"
          echo "$HOME/.local/bin" >> $GITHUB_PATH

          # Verify installation
          $HOME/.local/bin/heroku --version

      - name: Login to Heroku
        run: |
          echo ${{ secrets.HEROKU_API_KEY }} | heroku auth:token
        env:
          PATH: "$HOME/.local/bin:$PATH"

      - name: Deploy to Heroku
        run: |
          # Add Heroku remote if it doesn't exist
          if ! git remote | grep -q heroku; then
            heroku git:remote -a ${{ secrets.HEROKU_APP_NAME }}
          fi

          # Deploy to Heroku
          git push heroku HEAD:main --force
        env:
          PATH: "$HOME/.local/bin:$PATH"

      - name: Run database migrations (if needed)
        if: success()
        run: |
          # Run migrations if alembic is set up
          if [ -f "alembic.ini" ]; then
            heroku run alembic upgrade head --app ${{ secrets.HEROKU_APP_NAME }}
          fi
        continue-on-error: true
        env:
          PATH: "$HOME/.local/bin:$PATH"

      - name: Health check
        if: success()
        run: |
          sleep 30  # Wait for app to start
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/health)
          if [ $response -eq 200 ]; then
            echo "‚úÖ Deployment successful! App is responding with HTTP $response"
            # Also check the main endpoint
            main_response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/)
            echo "üè† Main endpoint responding with HTTP $main_response"
          else
            echo "‚ùå Health check failed with HTTP $response"
            echo "üìã Checking logs for troubleshooting..."
            heroku logs --tail --num=50 --app ${{ secrets.HEROKU_APP_NAME }} || true
            exit 1
          fi
        env:
          PATH: "$HOME/.local/bin:$PATH"
